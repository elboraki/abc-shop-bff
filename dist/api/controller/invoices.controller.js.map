{"version":3,"sources":["../../../src/api/controller/invoices.controller.js"],"names":["findAll","req","res","InvoiceModel","find","then","json","invoices","catch","status","StatusCodes","INTERNAL_SERVER_ERROR","error","create","body","item","qte","date","due","rate","tax","schema","Joi","object","keys","string","required","number","optional","validate","value","BAD_REQUEST","OK","invoice","msg","findOne","id","params","findById","NOT_FOUND","delete","findByIdAndRemove","update","findByIdAndUpdate"],"mappings":"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","file":"invoices.controller.js","sourcesContent":["import { StatusCodes } from \"http-status-codes\"\nimport InvoiceModel from \"../model/invoice.model\";\nimport Joi from \"joi\"\n\nexport default {\n\n\n\n    findAll(req, res) {\n        InvoiceModel.find().then(invoices => {\n            res.json(invoices).catch(error => {\n                res.status(StatusCodes.INTERNAL_SERVER_ERROR).json(error)\n            })\n        })\n    },\n\n    create(req, res) {\n        const { item, qte, date, due, rate, tax } = req.body;\n        const schema = Joi.object().keys({\n            item: Joi.string().required(),\n            qte: Joi.number().required(),\n            date: Joi.date().required(),\n            due: Joi.date().required(),\n            rate: Joi.number().optional(),\n            tax: Joi.number().optional(),\n        })\n\n        const { error, value } = schema.validate(req.body);\n\n        if (error) {\n            return res.status(StatusCodes.BAD_REQUEST).json(error)\n        }\n\n\n        InvoiceModel.create(value).then(invoice => {\n            res.status(StatusCodes.OK).json({ invoice })\n        }).catch(error => {\n            res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({ msg: error })\n        })\n    },\n    findOne(req, res) {\n        let { id } = req.params\n        InvoiceModel.findById(id).then(invoice => {\n            if (!invoice) {\n                return res.status(StatusCodes.NOT_FOUND).json({ msg: \"Invoice not found\" })\n            }\n            return res.json(invoice)\n        }).catch(error => {\n            return res.status(StatusCodes.INTERNAL_SERVER_ERROR).json(error)\n        })\n\n    },\n    delete(req, res) {\n        let { id } = req.params\n        InvoiceModel.findByIdAndRemove(id).then(invoice => {\n            if (!invoice) {\n                return res.status(StatusCodes.NOT_FOUND).json({ msg: \"Invoice not found\" })\n            }\n            return res.json(invoice)\n        }).catch(error => {\n            return res.status(StatusCodes.INTERNAL_SERVER_ERROR).json(error)\n        })\n\n    },\n    update(req,res){\n        let {id}=req.params\n        const schema = Joi.object().keys({\n            item: Joi.string().optional(),\n            qte: Joi.number().optional(),\n            date: Joi.date().optional(),\n            due: Joi.date().optional(),\n            rate: Joi.number().optional(),\n            tax: Joi.number().optional(),\n        })\n\n        const { error, value } = schema.validate(req.body);\n\n        if (error) {\n            return res.status(StatusCodes.BAD_REQUEST).json(error)\n        }\n\n\n        InvoiceModel.findByIdAndUpdate({\"_id\":id},value).then(invoice => {\n            res.status(StatusCodes.OK).json({ invoice })\n        }).catch(error => {\n            res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({ msg: error })\n        })\n    }\n}"]}